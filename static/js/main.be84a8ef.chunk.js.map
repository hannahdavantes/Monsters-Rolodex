{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById"],"mappings":"gTAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAClB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,G,MAAW,SAAAR,GACpB,OACI,sBAAKC,UAAU,YAAf,cACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,EAAhC,cAAWA,EAAQC,YCLtBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8DHG,E,kDAhEb,aAAe,IAAD,8BACZ,gBA6BFH,aAAe,SAACI,GAEd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA7BtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEAgBO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAgBpC,MAG2BC,KAAKN,MAA/Bb,EAHD,EAGCA,SAAUU,EAHX,EAGWA,YAMZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDAEA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA3DVI,aCClBC,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,W","file":"static/js/main.be84a8ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n    return (\r\n        <div className='card-list'> {\r\n            props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster}> </Card>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    //bind() -> returns a new functionw here the context of this is set to whatever we passed to it\n    //for every class method that is written -> we must bind it\n    //there is a way to easy fix it by using arrow function\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  //when component mounts -> renders it to page\n  //calls whatever block of code\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  //bind() -> returns a new functionw here the context of this is set to whatever we passed to it\n  //for every class method that is written -> we must bind it\n  //there is a way to easy fix it by using arrow function\n  // handleChange(e) {\n  //   //JavaScript doesn't set context\n  //   this.setState({ searchField: e.target.value })\n  // }\n  //arrow functions automatically binds to the place they were defined\n  handleChange = (e) => {\n    //JavaScript doesn't set context\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n\n    //destructuring -> allows us to pull properties off of an object and set it as constants\n    const { monsters, searchField } = this.state;\n\n    //similar to these:\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        \n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n\n        <CardList monsters={filteredMonsters} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}